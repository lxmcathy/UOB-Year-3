%initial population and generation
inn=100; %initial population size  
gnmax=150;  %maximum

%set p1,p2 and N
p_1 = p1;
p_2 = p2;
p_3 = 1 - p1 - p2; %1-p1-p2
N = 10;

rng(300); %seed
%coding graph with a added edge and form diagram
while i == j
    for i=1:N-1  
        for j=1:N-1
            adjacencyMatrix(i,j) = randi((i),(j));
        end  
    end 
    %adjacencyMatrix = adjacencyMatrix(i,j);
end

%generate initial population 
%result = zeros(1,30);
for ite =0:popSize
%generate initial population 
s=zeros(inn,N);  
    for i=1:inn  
        s(i,:)=randperm(N);  
    end
    %printMatrx(adjacencyMatrix);
    %initial fitness 
    %set fitness: 4(b) f2(G)-f1(G)
    f = Fitness(Question2(diameter) - Question2(averageLength));
    
    %mutation (to p1,p2,p3)
    %择优, new population
    s_temp=zeros(inn,N);  
    s_prev=zeros(inn,N);
    fit_prev=f;
    for i= 0:N
        if rand(p_1) <= p1
            s_temp = mutation_add(G,300); %300:seed
            break
        end
        if rand(p_2) <= p2
            s_temp = mutation_remove(G,300); %300:seed
            break
        end
        if rand(p_3) <= p3
            s_temp = Mutation_re(G,300);
        end
        fit_new = Fitness(fit_prev);      
    end
    
    k = 0;
    for pos = 0:N
        best_fit_temp = max(fit_new);
        best_fit_prev = max(fit_prev);
        if best_fit_prev < best_fit_temp
            k = fit_new(best_fit_temp);
            adjacencyMatrix(k) = s_temp;
            fit_new(k) = best_fit_temp;         
            break
        end
        if best_fit_prev > best_fit_temp
            k = fit_new(best_fit_prev);
            adjacencyMatrix(k) = s_prev;
            fit_new(k) = best_fit_prev;  
        end
    end
    disp(fit_new);
end

    

